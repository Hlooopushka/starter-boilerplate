{"version":3,"sources":["redux/actions/User.js","views/app-views/clientList/index.js"],"names":["putUserData","user","type","PUT_USER_DATA","payload","showLoading","SHOW_LOADING","clearUserData","CLEAR_USER_DATA","columns","title","dataIndex","key","render","text","filterItem","item","id","name","username","email","phone","company","connect","useState","users","setUsers","loading","setLoading","history","useHistory","useEffect","a","setTimeout","axios","get","then","resp","data","catch","err","console","log","length","filteredUsers","map","fetchUsers","className","dataSource","onRow","row","rowIndex","onClick","event","target","nodeName","push","APP_PREFIX_PATH"],"mappings":"mGAAA,mHAEaA,EAAc,SAACC,GACxB,MAAO,CACLC,KAAMC,IACNC,QAASH,IAIAI,EAAc,WACzB,MAAO,CACLH,KAAMI,MAGGC,EAAgB,WAC3B,MAAO,CACLL,KAAMM,O,yKCPNC,EAAU,CACd,CACEC,MAAO,qBACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAACC,GAAD,OAAU,4BAAIA,MAExB,CACEJ,MAAO,6CACPC,UAAW,WACXC,IAAK,YAEP,CACEF,MAAO,QACPC,UAAW,QACXC,IAAK,SAEP,CACEF,MAAO,6CACPC,UAAW,QACXC,IAAK,SAEP,CACEF,MAAO,mDACPC,UAAW,UACXC,IAAK,YAMHG,EAAa,SAACC,GASd,MARe,CACbJ,IAAKI,EAAKC,GACVC,KAAMF,EAAKE,KACXC,SAAUH,EAAKG,SACfC,MAAOJ,EAAKI,MACZC,MAAOL,EAAKK,MACZC,QAASN,EAAKM,QAAQJ,OAgEfK,uBALS,SAAC,GAEvB,MAAO,CAAEvB,YAF2B,EAAXC,KACjBD,eAI8B,CAACA,iBAA1BuB,EA1DK,SAAC,GAAsB,IAApBvB,EAAmB,EAAnBA,YAAmB,EAEZwB,mBAAS,IAFG,mBAE/BC,EAF+B,KAExBC,EAFwB,OAGRF,oBAAS,GAHD,mBAG/BG,EAH+B,KAGtBC,EAHsB,KAKhCC,EAAUC,cAwBhB,OAtBAC,qBAAU,YACU,uCAAG,8BAAAC,EAAA,6DACfC,WAAWL,GAAW,GAAO,KACzBH,EAAQ,GAFG,SAGMS,IAAMC,IAAI,8CAC9BC,MAAK,SAACC,GACHZ,EAAK,YAAOY,EAAKC,SAEpBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAPX,mBASVf,EAAMkB,OAAS,GATL,iBAULC,EAAgBnB,EAAMoB,KAAI,SAAA7B,GAC5B,OAAOD,EAAWC,MAEtBU,EAASkB,GAbE,iDAeF,IAfE,QAgBfhB,GAAW,GAhBI,4CAAH,qDAkBhBkB,KACF,IAEEnB,EAAkB,cAAC,IAAD,IAGtB,qBAAKoB,UAAU,oBAAf,SACE,cAAC,IAAD,CACEtC,QAASA,EACTuC,WAAYvB,EACZwB,MAAO,SAACC,EAAKC,GACX,MAAO,CACLC,QAAS,SAAAC,GACuB,MAA1BA,EAAMC,OAAOC,WAEfvD,EAAYkD,GACZrB,EAAQ2B,KAAR,UAAgBC,IAAhB","file":"static/js/15.8cadd819.chunk.js","sourcesContent":["import { PUT_USER_DATA, SHOW_LOADING, CLEAR_USER_DATA } from \"redux/constants/User\";\r\n\r\nexport const putUserData = (user) => {\r\n    return {\r\n      type: PUT_USER_DATA,\r\n      payload: user\r\n    }\r\n  };\r\n\r\n  export const showLoading = () => {\r\n    return {\r\n      type: SHOW_LOADING,\r\n    };\r\n  };\r\n  export const clearUserData = () => {\r\n    return {\r\n      type: CLEAR_USER_DATA\r\n    }\r\n  };\r\n\r\n  ","import { Table} from 'antd';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport Loading from 'components/shared-components/Loading';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { APP_PREFIX_PATH } from 'configs/AppConfig'\r\nimport { putUserData } from 'redux/actions/User';\r\nimport { connect } from \"react-redux\";\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Имя',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    render: (text) => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: 'Фамилия',\r\n    dataIndex: 'username',\r\n    key: 'username',\r\n  },\r\n  {\r\n    title: 'email',\r\n    dataIndex: 'email',\r\n    key: 'email',\r\n  },\r\n  {\r\n    title: 'Телефон',\r\n    dataIndex: 'phone',\r\n    key: 'phone',\r\n  },\r\n  {\r\n    title: 'Компания',\r\n    dataIndex: 'company',\r\n    key: 'company',\r\n  },\r\n];\r\n\r\n\r\n\r\nconst filterItem = (item) => {\r\n      const result = {\r\n        key: item.id,\r\n        name: item.name,\r\n        username: item.username,\r\n        email: item.email, \r\n        phone: item.phone,\r\n        company: item.company.name\r\n      }\r\n      return  result\r\n}\r\n\r\n\r\nconst ClientTable = ({ putUserData  }) => {\r\n\r\n    const [users, setUsers] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        const fetchUsers = async () => {\r\n            setTimeout(setLoading(true), 1000) ;\r\n            let users = [];\r\n            const result = await axios.get('https://jsonplaceholder.typicode.com/users')\r\n            .then((resp) => {\r\n                users = [...resp.data]\r\n            })\r\n            .catch(err => console.log(err))\r\n        \r\n            if  (users.length > 0) {\r\n                const filteredUsers = users.map(item => {\r\n                    return filterItem(item);\r\n                })\r\n                setUsers(filteredUsers)\r\n            }\r\n            else {return []}\r\n            setLoading(false);\r\n        }\r\n        fetchUsers()\r\n    },[])\r\n\r\n    if (loading) { return <Loading/>}\r\n\r\n    return( \r\n    <div className='ant-table-wrapper'>\r\n      <Table \r\n        columns={columns} \r\n        dataSource={users} \r\n        onRow={(row, rowIndex)=>{\r\n          return {\r\n            onClick: event => {\r\n              if (event.target.nodeName === 'A') \r\n              {\r\n                putUserData(row)\r\n                history.push(`${APP_PREFIX_PATH}/user-edit`)\r\n              }\r\n                //{console.log('clicked');} else {console.log('wrong cell')}\r\n              \r\n            }\r\n          }\r\n        }}/> \r\n      </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ({ user }) => {\r\n  const { putUserData  } =  user;\r\n  return { putUserData  }\r\n};\r\n\r\nexport default connect(mapStateToProps, {putUserData})(ClientTable);\r\n"],"sourceRoot":""}